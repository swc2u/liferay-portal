/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cscl.appointment.admin.table.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import cscl.appointment.admin.table.model.csclAppointmentAdmin;
import cscl.appointment.admin.table.model.csclAppointmentAdminModel;
import cscl.appointment.admin.table.model.csclAppointmentAdminSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the csclAppointmentAdmin service. Represents a row in the &quot;cscl_Appointment_Admin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>csclAppointmentAdminModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link csclAppointmentAdminImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see csclAppointmentAdminImpl
 * @generated
 */
@JSON(strict = true)
public class csclAppointmentAdminModelImpl
	extends BaseModelImpl<csclAppointmentAdmin>
	implements csclAppointmentAdminModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cscl appointment admin model instance should use the <code>csclAppointmentAdmin</code> interface instead.
	 */
	public static final String TABLE_NAME = "cscl_Appointment_Admin";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ID", Types.BIGINT},
		{"appointeeId", Types.BIGINT}, {"appointee", Types.VARCHAR},
		{"appointedDate", Types.VARCHAR}, {"FromTime", Types.VARCHAR},
		{"ToTime", Types.VARCHAR}, {"SecondTimeSlot", Types.VARCHAR},
		{"ThirdTimeSlot", Types.VARCHAR}, {"FourthTimeSlot", Types.VARCHAR},
		{"FifthTimeSlot", Types.VARCHAR}, {"SixthTimeSlot", Types.VARCHAR},
		{"SeventhTimeSlot", Types.VARCHAR}, {"EighthTimeSlot", Types.VARCHAR},
		{"NineTimeSlot", Types.VARCHAR}, {"TenTimeSlot", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appointeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appointee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appointedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FromTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ToTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SecondTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ThirdTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FourthTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FifthTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SixthTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SeventhTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EighthTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NineTimeSlot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TenTimeSlot", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cscl_Appointment_Admin (uuid_ VARCHAR(75) null,ID LONG not null primary key,appointeeId LONG,appointee VARCHAR(75) null,appointedDate VARCHAR(75) null,FromTime VARCHAR(75) null,ToTime VARCHAR(75) null,SecondTimeSlot VARCHAR(75) null,ThirdTimeSlot VARCHAR(75) null,FourthTimeSlot VARCHAR(75) null,FifthTimeSlot VARCHAR(75) null,SixthTimeSlot VARCHAR(75) null,SeventhTimeSlot VARCHAR(75) null,EighthTimeSlot VARCHAR(75) null,NineTimeSlot VARCHAR(75) null,TenTimeSlot VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table cscl_Appointment_Admin";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csclAppointmentAdmin.ID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cscl_Appointment_Admin.ID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EIGHTHTIMESLOT_COLUMN_BITMASK = 1L;

	public static final long FIFTHTIMESLOT_COLUMN_BITMASK = 2L;

	public static final long FOURTHTIMESLOT_COLUMN_BITMASK = 4L;

	public static final long FROMTIME_COLUMN_BITMASK = 8L;

	public static final long SECONDTIMESLOT_COLUMN_BITMASK = 16L;

	public static final long SEVENTHTIMESLOT_COLUMN_BITMASK = 32L;

	public static final long SIXTHTIMESLOT_COLUMN_BITMASK = 64L;

	public static final long THIRDTIMESLOT_COLUMN_BITMASK = 128L;

	public static final long APPOINTEDDATE_COLUMN_BITMASK = 256L;

	public static final long APPOINTEE_COLUMN_BITMASK = 512L;

	public static final long APPOINTEEID_COLUMN_BITMASK = 1024L;

	public static final long UUID_COLUMN_BITMASK = 2048L;

	public static final long ID_COLUMN_BITMASK = 4096L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static csclAppointmentAdmin toModel(
		csclAppointmentAdminSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		csclAppointmentAdmin model = new csclAppointmentAdminImpl();

		model.setUuid(soapModel.getUuid());
		model.setID(soapModel.getID());
		model.setAppointeeId(soapModel.getAppointeeId());
		model.setAppointee(soapModel.getAppointee());
		model.setAppointedDate(soapModel.getAppointedDate());
		model.setFromTime(soapModel.getFromTime());
		model.setToTime(soapModel.getToTime());
		model.setSecondTimeSlot(soapModel.getSecondTimeSlot());
		model.setThirdTimeSlot(soapModel.getThirdTimeSlot());
		model.setFourthTimeSlot(soapModel.getFourthTimeSlot());
		model.setFifthTimeSlot(soapModel.getFifthTimeSlot());
		model.setSixthTimeSlot(soapModel.getSixthTimeSlot());
		model.setSeventhTimeSlot(soapModel.getSeventhTimeSlot());
		model.setEighthTimeSlot(soapModel.getEighthTimeSlot());
		model.setNineTimeSlot(soapModel.getNineTimeSlot());
		model.setTenTimeSlot(soapModel.getTenTimeSlot());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<csclAppointmentAdmin> toModels(
		csclAppointmentAdminSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<csclAppointmentAdmin> models = new ArrayList<csclAppointmentAdmin>(
			soapModels.length);

		for (csclAppointmentAdminSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public csclAppointmentAdminModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return csclAppointmentAdmin.class;
	}

	@Override
	public String getModelClassName() {
		return csclAppointmentAdmin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<csclAppointmentAdmin, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<csclAppointmentAdmin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<csclAppointmentAdmin, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((csclAppointmentAdmin)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<csclAppointmentAdmin, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<csclAppointmentAdmin, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(csclAppointmentAdmin)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<csclAppointmentAdmin, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<csclAppointmentAdmin, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, csclAppointmentAdmin>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			csclAppointmentAdmin.class.getClassLoader(),
			csclAppointmentAdmin.class, ModelWrapper.class);

		try {
			Constructor<csclAppointmentAdmin> constructor =
				(Constructor<csclAppointmentAdmin>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<csclAppointmentAdmin, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<csclAppointmentAdmin, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<csclAppointmentAdmin, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<csclAppointmentAdmin, Object>>();
		Map<String, BiConsumer<csclAppointmentAdmin, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<csclAppointmentAdmin, ?>>();

		attributeGetterFunctions.put("uuid", csclAppointmentAdmin::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setUuid);
		attributeGetterFunctions.put("ID", csclAppointmentAdmin::getID);
		attributeSetterBiConsumers.put(
			"ID",
			(BiConsumer<csclAppointmentAdmin, Long>)
				csclAppointmentAdmin::setID);
		attributeGetterFunctions.put(
			"appointeeId", csclAppointmentAdmin::getAppointeeId);
		attributeSetterBiConsumers.put(
			"appointeeId",
			(BiConsumer<csclAppointmentAdmin, Long>)
				csclAppointmentAdmin::setAppointeeId);
		attributeGetterFunctions.put(
			"appointee", csclAppointmentAdmin::getAppointee);
		attributeSetterBiConsumers.put(
			"appointee",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setAppointee);
		attributeGetterFunctions.put(
			"appointedDate", csclAppointmentAdmin::getAppointedDate);
		attributeSetterBiConsumers.put(
			"appointedDate",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setAppointedDate);
		attributeGetterFunctions.put(
			"FromTime", csclAppointmentAdmin::getFromTime);
		attributeSetterBiConsumers.put(
			"FromTime",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setFromTime);
		attributeGetterFunctions.put("ToTime", csclAppointmentAdmin::getToTime);
		attributeSetterBiConsumers.put(
			"ToTime",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setToTime);
		attributeGetterFunctions.put(
			"SecondTimeSlot", csclAppointmentAdmin::getSecondTimeSlot);
		attributeSetterBiConsumers.put(
			"SecondTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setSecondTimeSlot);
		attributeGetterFunctions.put(
			"ThirdTimeSlot", csclAppointmentAdmin::getThirdTimeSlot);
		attributeSetterBiConsumers.put(
			"ThirdTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setThirdTimeSlot);
		attributeGetterFunctions.put(
			"FourthTimeSlot", csclAppointmentAdmin::getFourthTimeSlot);
		attributeSetterBiConsumers.put(
			"FourthTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setFourthTimeSlot);
		attributeGetterFunctions.put(
			"FifthTimeSlot", csclAppointmentAdmin::getFifthTimeSlot);
		attributeSetterBiConsumers.put(
			"FifthTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setFifthTimeSlot);
		attributeGetterFunctions.put(
			"SixthTimeSlot", csclAppointmentAdmin::getSixthTimeSlot);
		attributeSetterBiConsumers.put(
			"SixthTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setSixthTimeSlot);
		attributeGetterFunctions.put(
			"SeventhTimeSlot", csclAppointmentAdmin::getSeventhTimeSlot);
		attributeSetterBiConsumers.put(
			"SeventhTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setSeventhTimeSlot);
		attributeGetterFunctions.put(
			"EighthTimeSlot", csclAppointmentAdmin::getEighthTimeSlot);
		attributeSetterBiConsumers.put(
			"EighthTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setEighthTimeSlot);
		attributeGetterFunctions.put(
			"NineTimeSlot", csclAppointmentAdmin::getNineTimeSlot);
		attributeSetterBiConsumers.put(
			"NineTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setNineTimeSlot);
		attributeGetterFunctions.put(
			"TenTimeSlot", csclAppointmentAdmin::getTenTimeSlot);
		attributeSetterBiConsumers.put(
			"TenTimeSlot",
			(BiConsumer<csclAppointmentAdmin, String>)
				csclAppointmentAdmin::setTenTimeSlot);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getID() {
		return _ID;
	}

	@Override
	public void setID(long ID) {
		_ID = ID;
	}

	@JSON
	@Override
	public long getAppointeeId() {
		return _appointeeId;
	}

	@Override
	public void setAppointeeId(long appointeeId) {
		_columnBitmask |= APPOINTEEID_COLUMN_BITMASK;

		if (!_setOriginalAppointeeId) {
			_setOriginalAppointeeId = true;

			_originalAppointeeId = _appointeeId;
		}

		_appointeeId = appointeeId;
	}

	public long getOriginalAppointeeId() {
		return _originalAppointeeId;
	}

	@JSON
	@Override
	public String getAppointee() {
		if (_appointee == null) {
			return "";
		}
		else {
			return _appointee;
		}
	}

	@Override
	public void setAppointee(String appointee) {
		_columnBitmask |= APPOINTEE_COLUMN_BITMASK;

		if (_originalAppointee == null) {
			_originalAppointee = _appointee;
		}

		_appointee = appointee;
	}

	public String getOriginalAppointee() {
		return GetterUtil.getString(_originalAppointee);
	}

	@JSON
	@Override
	public String getAppointedDate() {
		if (_appointedDate == null) {
			return "";
		}
		else {
			return _appointedDate;
		}
	}

	@Override
	public void setAppointedDate(String appointedDate) {
		_columnBitmask |= APPOINTEDDATE_COLUMN_BITMASK;

		if (_originalAppointedDate == null) {
			_originalAppointedDate = _appointedDate;
		}

		_appointedDate = appointedDate;
	}

	public String getOriginalAppointedDate() {
		return GetterUtil.getString(_originalAppointedDate);
	}

	@JSON
	@Override
	public String getFromTime() {
		if (_FromTime == null) {
			return "";
		}
		else {
			return _FromTime;
		}
	}

	@Override
	public void setFromTime(String FromTime) {
		_columnBitmask |= FROMTIME_COLUMN_BITMASK;

		if (_originalFromTime == null) {
			_originalFromTime = _FromTime;
		}

		_FromTime = FromTime;
	}

	public String getOriginalFromTime() {
		return GetterUtil.getString(_originalFromTime);
	}

	@JSON
	@Override
	public String getToTime() {
		if (_ToTime == null) {
			return "";
		}
		else {
			return _ToTime;
		}
	}

	@Override
	public void setToTime(String ToTime) {
		_ToTime = ToTime;
	}

	@JSON
	@Override
	public String getSecondTimeSlot() {
		if (_SecondTimeSlot == null) {
			return "";
		}
		else {
			return _SecondTimeSlot;
		}
	}

	@Override
	public void setSecondTimeSlot(String SecondTimeSlot) {
		_columnBitmask |= SECONDTIMESLOT_COLUMN_BITMASK;

		if (_originalSecondTimeSlot == null) {
			_originalSecondTimeSlot = _SecondTimeSlot;
		}

		_SecondTimeSlot = SecondTimeSlot;
	}

	public String getOriginalSecondTimeSlot() {
		return GetterUtil.getString(_originalSecondTimeSlot);
	}

	@JSON
	@Override
	public String getThirdTimeSlot() {
		if (_ThirdTimeSlot == null) {
			return "";
		}
		else {
			return _ThirdTimeSlot;
		}
	}

	@Override
	public void setThirdTimeSlot(String ThirdTimeSlot) {
		_columnBitmask |= THIRDTIMESLOT_COLUMN_BITMASK;

		if (_originalThirdTimeSlot == null) {
			_originalThirdTimeSlot = _ThirdTimeSlot;
		}

		_ThirdTimeSlot = ThirdTimeSlot;
	}

	public String getOriginalThirdTimeSlot() {
		return GetterUtil.getString(_originalThirdTimeSlot);
	}

	@JSON
	@Override
	public String getFourthTimeSlot() {
		if (_FourthTimeSlot == null) {
			return "";
		}
		else {
			return _FourthTimeSlot;
		}
	}

	@Override
	public void setFourthTimeSlot(String FourthTimeSlot) {
		_columnBitmask |= FOURTHTIMESLOT_COLUMN_BITMASK;

		if (_originalFourthTimeSlot == null) {
			_originalFourthTimeSlot = _FourthTimeSlot;
		}

		_FourthTimeSlot = FourthTimeSlot;
	}

	public String getOriginalFourthTimeSlot() {
		return GetterUtil.getString(_originalFourthTimeSlot);
	}

	@JSON
	@Override
	public String getFifthTimeSlot() {
		if (_FifthTimeSlot == null) {
			return "";
		}
		else {
			return _FifthTimeSlot;
		}
	}

	@Override
	public void setFifthTimeSlot(String FifthTimeSlot) {
		_columnBitmask |= FIFTHTIMESLOT_COLUMN_BITMASK;

		if (_originalFifthTimeSlot == null) {
			_originalFifthTimeSlot = _FifthTimeSlot;
		}

		_FifthTimeSlot = FifthTimeSlot;
	}

	public String getOriginalFifthTimeSlot() {
		return GetterUtil.getString(_originalFifthTimeSlot);
	}

	@JSON
	@Override
	public String getSixthTimeSlot() {
		if (_SixthTimeSlot == null) {
			return "";
		}
		else {
			return _SixthTimeSlot;
		}
	}

	@Override
	public void setSixthTimeSlot(String SixthTimeSlot) {
		_columnBitmask |= SIXTHTIMESLOT_COLUMN_BITMASK;

		if (_originalSixthTimeSlot == null) {
			_originalSixthTimeSlot = _SixthTimeSlot;
		}

		_SixthTimeSlot = SixthTimeSlot;
	}

	public String getOriginalSixthTimeSlot() {
		return GetterUtil.getString(_originalSixthTimeSlot);
	}

	@JSON
	@Override
	public String getSeventhTimeSlot() {
		if (_SeventhTimeSlot == null) {
			return "";
		}
		else {
			return _SeventhTimeSlot;
		}
	}

	@Override
	public void setSeventhTimeSlot(String SeventhTimeSlot) {
		_columnBitmask |= SEVENTHTIMESLOT_COLUMN_BITMASK;

		if (_originalSeventhTimeSlot == null) {
			_originalSeventhTimeSlot = _SeventhTimeSlot;
		}

		_SeventhTimeSlot = SeventhTimeSlot;
	}

	public String getOriginalSeventhTimeSlot() {
		return GetterUtil.getString(_originalSeventhTimeSlot);
	}

	@JSON
	@Override
	public String getEighthTimeSlot() {
		if (_EighthTimeSlot == null) {
			return "";
		}
		else {
			return _EighthTimeSlot;
		}
	}

	@Override
	public void setEighthTimeSlot(String EighthTimeSlot) {
		_columnBitmask |= EIGHTHTIMESLOT_COLUMN_BITMASK;

		if (_originalEighthTimeSlot == null) {
			_originalEighthTimeSlot = _EighthTimeSlot;
		}

		_EighthTimeSlot = EighthTimeSlot;
	}

	public String getOriginalEighthTimeSlot() {
		return GetterUtil.getString(_originalEighthTimeSlot);
	}

	@JSON
	@Override
	public String getNineTimeSlot() {
		if (_NineTimeSlot == null) {
			return "";
		}
		else {
			return _NineTimeSlot;
		}
	}

	@Override
	public void setNineTimeSlot(String NineTimeSlot) {
		_NineTimeSlot = NineTimeSlot;
	}

	@JSON
	@Override
	public String getTenTimeSlot() {
		if (_TenTimeSlot == null) {
			return "";
		}
		else {
			return _TenTimeSlot;
		}
	}

	@Override
	public void setTenTimeSlot(String TenTimeSlot) {
		_TenTimeSlot = TenTimeSlot;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, csclAppointmentAdmin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public csclAppointmentAdmin toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, csclAppointmentAdmin>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		csclAppointmentAdminImpl csclAppointmentAdminImpl =
			new csclAppointmentAdminImpl();

		csclAppointmentAdminImpl.setUuid(getUuid());
		csclAppointmentAdminImpl.setID(getID());
		csclAppointmentAdminImpl.setAppointeeId(getAppointeeId());
		csclAppointmentAdminImpl.setAppointee(getAppointee());
		csclAppointmentAdminImpl.setAppointedDate(getAppointedDate());
		csclAppointmentAdminImpl.setFromTime(getFromTime());
		csclAppointmentAdminImpl.setToTime(getToTime());
		csclAppointmentAdminImpl.setSecondTimeSlot(getSecondTimeSlot());
		csclAppointmentAdminImpl.setThirdTimeSlot(getThirdTimeSlot());
		csclAppointmentAdminImpl.setFourthTimeSlot(getFourthTimeSlot());
		csclAppointmentAdminImpl.setFifthTimeSlot(getFifthTimeSlot());
		csclAppointmentAdminImpl.setSixthTimeSlot(getSixthTimeSlot());
		csclAppointmentAdminImpl.setSeventhTimeSlot(getSeventhTimeSlot());
		csclAppointmentAdminImpl.setEighthTimeSlot(getEighthTimeSlot());
		csclAppointmentAdminImpl.setNineTimeSlot(getNineTimeSlot());
		csclAppointmentAdminImpl.setTenTimeSlot(getTenTimeSlot());

		csclAppointmentAdminImpl.resetOriginalValues();

		return csclAppointmentAdminImpl;
	}

	@Override
	public int compareTo(csclAppointmentAdmin csclAppointmentAdmin) {
		long primaryKey = csclAppointmentAdmin.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof csclAppointmentAdmin)) {
			return false;
		}

		csclAppointmentAdmin csclAppointmentAdmin = (csclAppointmentAdmin)obj;

		long primaryKey = csclAppointmentAdmin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		csclAppointmentAdminModelImpl csclAppointmentAdminModelImpl = this;

		csclAppointmentAdminModelImpl._originalUuid =
			csclAppointmentAdminModelImpl._uuid;

		csclAppointmentAdminModelImpl._originalAppointeeId =
			csclAppointmentAdminModelImpl._appointeeId;

		csclAppointmentAdminModelImpl._setOriginalAppointeeId = false;

		csclAppointmentAdminModelImpl._originalAppointee =
			csclAppointmentAdminModelImpl._appointee;

		csclAppointmentAdminModelImpl._originalAppointedDate =
			csclAppointmentAdminModelImpl._appointedDate;

		csclAppointmentAdminModelImpl._originalFromTime =
			csclAppointmentAdminModelImpl._FromTime;

		csclAppointmentAdminModelImpl._originalSecondTimeSlot =
			csclAppointmentAdminModelImpl._SecondTimeSlot;

		csclAppointmentAdminModelImpl._originalThirdTimeSlot =
			csclAppointmentAdminModelImpl._ThirdTimeSlot;

		csclAppointmentAdminModelImpl._originalFourthTimeSlot =
			csclAppointmentAdminModelImpl._FourthTimeSlot;

		csclAppointmentAdminModelImpl._originalFifthTimeSlot =
			csclAppointmentAdminModelImpl._FifthTimeSlot;

		csclAppointmentAdminModelImpl._originalSixthTimeSlot =
			csclAppointmentAdminModelImpl._SixthTimeSlot;

		csclAppointmentAdminModelImpl._originalSeventhTimeSlot =
			csclAppointmentAdminModelImpl._SeventhTimeSlot;

		csclAppointmentAdminModelImpl._originalEighthTimeSlot =
			csclAppointmentAdminModelImpl._EighthTimeSlot;

		csclAppointmentAdminModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<csclAppointmentAdmin> toCacheModel() {
		csclAppointmentAdminCacheModel csclAppointmentAdminCacheModel =
			new csclAppointmentAdminCacheModel();

		csclAppointmentAdminCacheModel.uuid = getUuid();

		String uuid = csclAppointmentAdminCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			csclAppointmentAdminCacheModel.uuid = null;
		}

		csclAppointmentAdminCacheModel.ID = getID();

		csclAppointmentAdminCacheModel.appointeeId = getAppointeeId();

		csclAppointmentAdminCacheModel.appointee = getAppointee();

		String appointee = csclAppointmentAdminCacheModel.appointee;

		if ((appointee != null) && (appointee.length() == 0)) {
			csclAppointmentAdminCacheModel.appointee = null;
		}

		csclAppointmentAdminCacheModel.appointedDate = getAppointedDate();

		String appointedDate = csclAppointmentAdminCacheModel.appointedDate;

		if ((appointedDate != null) && (appointedDate.length() == 0)) {
			csclAppointmentAdminCacheModel.appointedDate = null;
		}

		csclAppointmentAdminCacheModel.FromTime = getFromTime();

		String FromTime = csclAppointmentAdminCacheModel.FromTime;

		if ((FromTime != null) && (FromTime.length() == 0)) {
			csclAppointmentAdminCacheModel.FromTime = null;
		}

		csclAppointmentAdminCacheModel.ToTime = getToTime();

		String ToTime = csclAppointmentAdminCacheModel.ToTime;

		if ((ToTime != null) && (ToTime.length() == 0)) {
			csclAppointmentAdminCacheModel.ToTime = null;
		}

		csclAppointmentAdminCacheModel.SecondTimeSlot = getSecondTimeSlot();

		String SecondTimeSlot = csclAppointmentAdminCacheModel.SecondTimeSlot;

		if ((SecondTimeSlot != null) && (SecondTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.SecondTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.ThirdTimeSlot = getThirdTimeSlot();

		String ThirdTimeSlot = csclAppointmentAdminCacheModel.ThirdTimeSlot;

		if ((ThirdTimeSlot != null) && (ThirdTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.ThirdTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.FourthTimeSlot = getFourthTimeSlot();

		String FourthTimeSlot = csclAppointmentAdminCacheModel.FourthTimeSlot;

		if ((FourthTimeSlot != null) && (FourthTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.FourthTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.FifthTimeSlot = getFifthTimeSlot();

		String FifthTimeSlot = csclAppointmentAdminCacheModel.FifthTimeSlot;

		if ((FifthTimeSlot != null) && (FifthTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.FifthTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.SixthTimeSlot = getSixthTimeSlot();

		String SixthTimeSlot = csclAppointmentAdminCacheModel.SixthTimeSlot;

		if ((SixthTimeSlot != null) && (SixthTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.SixthTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.SeventhTimeSlot = getSeventhTimeSlot();

		String SeventhTimeSlot = csclAppointmentAdminCacheModel.SeventhTimeSlot;

		if ((SeventhTimeSlot != null) && (SeventhTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.SeventhTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.EighthTimeSlot = getEighthTimeSlot();

		String EighthTimeSlot = csclAppointmentAdminCacheModel.EighthTimeSlot;

		if ((EighthTimeSlot != null) && (EighthTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.EighthTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.NineTimeSlot = getNineTimeSlot();

		String NineTimeSlot = csclAppointmentAdminCacheModel.NineTimeSlot;

		if ((NineTimeSlot != null) && (NineTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.NineTimeSlot = null;
		}

		csclAppointmentAdminCacheModel.TenTimeSlot = getTenTimeSlot();

		String TenTimeSlot = csclAppointmentAdminCacheModel.TenTimeSlot;

		if ((TenTimeSlot != null) && (TenTimeSlot.length() == 0)) {
			csclAppointmentAdminCacheModel.TenTimeSlot = null;
		}

		return csclAppointmentAdminCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<csclAppointmentAdmin, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<csclAppointmentAdmin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<csclAppointmentAdmin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((csclAppointmentAdmin)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<csclAppointmentAdmin, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<csclAppointmentAdmin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<csclAppointmentAdmin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((csclAppointmentAdmin)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, csclAppointmentAdmin>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;

	private long _ID;

	private long _appointeeId;
	private long _originalAppointeeId;
	private boolean _setOriginalAppointeeId;
	private String _appointee;
	private String _originalAppointee;
	private String _appointedDate;
	private String _originalAppointedDate;
	private String _FromTime;
	private String _originalFromTime;
	private String _ToTime;
	private String _SecondTimeSlot;
	private String _originalSecondTimeSlot;
	private String _ThirdTimeSlot;
	private String _originalThirdTimeSlot;
	private String _FourthTimeSlot;
	private String _originalFourthTimeSlot;
	private String _FifthTimeSlot;
	private String _originalFifthTimeSlot;
	private String _SixthTimeSlot;
	private String _originalSixthTimeSlot;
	private String _SeventhTimeSlot;
	private String _originalSeventhTimeSlot;
	private String _EighthTimeSlot;
	private String _originalEighthTimeSlot;
	private String _NineTimeSlot;
	private String _TenTimeSlot;
	private long _columnBitmask;
	private csclAppointmentAdmin _escapedModel;

}