/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cscl.appointment.booking.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import cscl.appointment.booking.model.CsclAppointeeMaster;
import cscl.appointment.booking.model.CsclAppointeeMasterModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CsclAppointeeMaster service. Represents a row in the &quot;cscl_appointee_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CsclAppointeeMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsclAppointeeMasterImpl}.
 * </p>
 *
 * @author @rnab
 * @see CsclAppointeeMasterImpl
 * @generated
 */
public class CsclAppointeeMasterModelImpl
	extends BaseModelImpl<CsclAppointeeMaster>
	implements CsclAppointeeMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cscl appointee master model instance should use the <code>CsclAppointeeMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "cscl_appointee_master";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"name", Types.VARCHAR},
		{"designation", Types.VARCHAR}, {"isActive", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cscl_appointee_master (id_ LONG not null primary key,name VARCHAR(75) null,designation VARCHAR(75) null,isActive BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table cscl_appointee_master";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csclAppointeeMaster.id_ ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cscl_appointee_master.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ID__COLUMN_BITMASK = 1L;

	public static final long ISACTIVE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public CsclAppointeeMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CsclAppointeeMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CsclAppointeeMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsclAppointeeMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsclAppointeeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclAppointeeMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CsclAppointeeMaster)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsclAppointeeMaster, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsclAppointeeMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsclAppointeeMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsclAppointeeMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsclAppointeeMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CsclAppointeeMaster>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CsclAppointeeMaster.class.getClassLoader(),
			CsclAppointeeMaster.class, ModelWrapper.class);

		try {
			Constructor<CsclAppointeeMaster> constructor =
				(Constructor<CsclAppointeeMaster>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CsclAppointeeMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsclAppointeeMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsclAppointeeMaster, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CsclAppointeeMaster, Object>>();
		Map<String, BiConsumer<CsclAppointeeMaster, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CsclAppointeeMaster, ?>>();

		attributeGetterFunctions.put("id_", CsclAppointeeMaster::getId_);
		attributeSetterBiConsumers.put(
			"id_",
			(BiConsumer<CsclAppointeeMaster, Long>)CsclAppointeeMaster::setId_);
		attributeGetterFunctions.put("name", CsclAppointeeMaster::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CsclAppointeeMaster, String>)
				CsclAppointeeMaster::setName);
		attributeGetterFunctions.put(
			"designation", CsclAppointeeMaster::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<CsclAppointeeMaster, String>)
				CsclAppointeeMaster::setDesignation);
		attributeGetterFunctions.put(
			"isActive", CsclAppointeeMaster::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<CsclAppointeeMaster, Boolean>)
				CsclAppointeeMaster::setIsActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId_() {
		return _id_;
	}

	@Override
	public void setId_(long id_) {
		_columnBitmask |= ID__COLUMN_BITMASK;

		if (!_setOriginalId_) {
			_setOriginalId_ = true;

			_originalId_ = _id_;
		}

		_id_ = id_;
	}

	public long getOriginalId_() {
		return _originalId_;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		_designation = designation;
	}

	@Override
	public Boolean getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(Boolean isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public Boolean getOriginalIsActive() {
		return _originalIsActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CsclAppointeeMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CsclAppointeeMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsclAppointeeMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsclAppointeeMasterImpl csclAppointeeMasterImpl =
			new CsclAppointeeMasterImpl();

		csclAppointeeMasterImpl.setId_(getId_());
		csclAppointeeMasterImpl.setName(getName());
		csclAppointeeMasterImpl.setDesignation(getDesignation());
		csclAppointeeMasterImpl.setIsActive(getIsActive());

		csclAppointeeMasterImpl.resetOriginalValues();

		return csclAppointeeMasterImpl;
	}

	@Override
	public int compareTo(CsclAppointeeMaster csclAppointeeMaster) {
		long primaryKey = csclAppointeeMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CsclAppointeeMaster)) {
			return false;
		}

		CsclAppointeeMaster csclAppointeeMaster = (CsclAppointeeMaster)obj;

		long primaryKey = csclAppointeeMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CsclAppointeeMasterModelImpl csclAppointeeMasterModelImpl = this;

		csclAppointeeMasterModelImpl._originalId_ =
			csclAppointeeMasterModelImpl._id_;

		csclAppointeeMasterModelImpl._setOriginalId_ = false;

		csclAppointeeMasterModelImpl._originalIsActive =
			csclAppointeeMasterModelImpl._isActive;

		csclAppointeeMasterModelImpl._setOriginalIsActive = false;

		csclAppointeeMasterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CsclAppointeeMaster> toCacheModel() {
		CsclAppointeeMasterCacheModel csclAppointeeMasterCacheModel =
			new CsclAppointeeMasterCacheModel();

		csclAppointeeMasterCacheModel.id_ = getId_();

		csclAppointeeMasterCacheModel.name = getName();

		String name = csclAppointeeMasterCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			csclAppointeeMasterCacheModel.name = null;
		}

		csclAppointeeMasterCacheModel.designation = getDesignation();

		String designation = csclAppointeeMasterCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			csclAppointeeMasterCacheModel.designation = null;
		}

		csclAppointeeMasterCacheModel.isActive = getIsActive();

		return csclAppointeeMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsclAppointeeMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsclAppointeeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclAppointeeMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CsclAppointeeMaster)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CsclAppointeeMaster, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CsclAppointeeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclAppointeeMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CsclAppointeeMaster)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsclAppointeeMaster>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id_;
	private long _originalId_;
	private boolean _setOriginalId_;
	private String _name;
	private String _designation;
	private Boolean _isActive;
	private Boolean _originalIsActive;
	private boolean _setOriginalIsActive;
	private long _columnBitmask;
	private CsclAppointeeMaster _escapedModel;

}