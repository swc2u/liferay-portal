/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cscl.appointment.booking.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import cscl.appointment.booking.model.CsclApproverMapping;
import cscl.appointment.booking.model.CsclApproverMappingModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CsclApproverMapping service. Represents a row in the &quot;cscl_approver_mapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CsclApproverMappingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsclApproverMappingImpl}.
 * </p>
 *
 * @author @rnab
 * @see CsclApproverMappingImpl
 * @generated
 */
public class CsclApproverMappingModelImpl
	extends BaseModelImpl<CsclApproverMapping>
	implements CsclApproverMappingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cscl approver mapping model instance should use the <code>CsclApproverMapping</code> interface instead.
	 */
	public static final String TABLE_NAME = "cscl_approver_mapping";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"appointee", Types.INTEGER},
		{"approver", Types.VARCHAR}, {"assignedTo", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appointee", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("approver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignedTo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cscl_approver_mapping (id_ LONG not null primary key,appointee INTEGER,approver VARCHAR(75) null,assignedTo LONG,createdDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table cscl_approver_mapping";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csclApproverMapping.id_ ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cscl_approver_mapping.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long APPOINTEE_COLUMN_BITMASK = 1L;

	public static final long ASSIGNEDTO_COLUMN_BITMASK = 2L;

	public static final long ID__COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public CsclApproverMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CsclApproverMapping.class;
	}

	@Override
	public String getModelClassName() {
		return CsclApproverMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsclApproverMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsclApproverMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclApproverMapping, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CsclApproverMapping)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsclApproverMapping, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsclApproverMapping, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsclApproverMapping)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsclApproverMapping, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsclApproverMapping, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CsclApproverMapping>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CsclApproverMapping.class.getClassLoader(),
			CsclApproverMapping.class, ModelWrapper.class);

		try {
			Constructor<CsclApproverMapping> constructor =
				(Constructor<CsclApproverMapping>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CsclApproverMapping, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsclApproverMapping, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsclApproverMapping, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CsclApproverMapping, Object>>();
		Map<String, BiConsumer<CsclApproverMapping, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CsclApproverMapping, ?>>();

		attributeGetterFunctions.put("id_", CsclApproverMapping::getId_);
		attributeSetterBiConsumers.put(
			"id_",
			(BiConsumer<CsclApproverMapping, Long>)CsclApproverMapping::setId_);
		attributeGetterFunctions.put(
			"appointee", CsclApproverMapping::getAppointee);
		attributeSetterBiConsumers.put(
			"appointee",
			(BiConsumer<CsclApproverMapping, Integer>)
				CsclApproverMapping::setAppointee);
		attributeGetterFunctions.put(
			"approver", CsclApproverMapping::getApprover);
		attributeSetterBiConsumers.put(
			"approver",
			(BiConsumer<CsclApproverMapping, String>)
				CsclApproverMapping::setApprover);
		attributeGetterFunctions.put(
			"assignedTo", CsclApproverMapping::getAssignedTo);
		attributeSetterBiConsumers.put(
			"assignedTo",
			(BiConsumer<CsclApproverMapping, Long>)
				CsclApproverMapping::setAssignedTo);
		attributeGetterFunctions.put(
			"createdDate", CsclApproverMapping::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<CsclApproverMapping, Date>)
				CsclApproverMapping::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedDate", CsclApproverMapping::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CsclApproverMapping, Date>)
				CsclApproverMapping::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId_() {
		return _id_;
	}

	@Override
	public void setId_(long id_) {
		_id_ = id_;
	}

	@Override
	public int getAppointee() {
		return _appointee;
	}

	@Override
	public void setAppointee(int appointee) {
		_columnBitmask |= APPOINTEE_COLUMN_BITMASK;

		if (!_setOriginalAppointee) {
			_setOriginalAppointee = true;

			_originalAppointee = _appointee;
		}

		_appointee = appointee;
	}

	public int getOriginalAppointee() {
		return _originalAppointee;
	}

	@Override
	public String getApprover() {
		if (_approver == null) {
			return "";
		}
		else {
			return _approver;
		}
	}

	@Override
	public void setApprover(String approver) {
		_approver = approver;
	}

	@Override
	public long getAssignedTo() {
		return _assignedTo;
	}

	@Override
	public void setAssignedTo(long assignedTo) {
		_columnBitmask |= ASSIGNEDTO_COLUMN_BITMASK;

		if (!_setOriginalAssignedTo) {
			_setOriginalAssignedTo = true;

			_originalAssignedTo = _assignedTo;
		}

		_assignedTo = assignedTo;
	}

	public long getOriginalAssignedTo() {
		return _originalAssignedTo;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CsclApproverMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CsclApproverMapping toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsclApproverMapping>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsclApproverMappingImpl csclApproverMappingImpl =
			new CsclApproverMappingImpl();

		csclApproverMappingImpl.setId_(getId_());
		csclApproverMappingImpl.setAppointee(getAppointee());
		csclApproverMappingImpl.setApprover(getApprover());
		csclApproverMappingImpl.setAssignedTo(getAssignedTo());
		csclApproverMappingImpl.setCreatedDate(getCreatedDate());
		csclApproverMappingImpl.setModifiedDate(getModifiedDate());

		csclApproverMappingImpl.resetOriginalValues();

		return csclApproverMappingImpl;
	}

	@Override
	public int compareTo(CsclApproverMapping csclApproverMapping) {
		long primaryKey = csclApproverMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CsclApproverMapping)) {
			return false;
		}

		CsclApproverMapping csclApproverMapping = (CsclApproverMapping)obj;

		long primaryKey = csclApproverMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CsclApproverMappingModelImpl csclApproverMappingModelImpl = this;

		csclApproverMappingModelImpl._originalAppointee =
			csclApproverMappingModelImpl._appointee;

		csclApproverMappingModelImpl._setOriginalAppointee = false;

		csclApproverMappingModelImpl._originalAssignedTo =
			csclApproverMappingModelImpl._assignedTo;

		csclApproverMappingModelImpl._setOriginalAssignedTo = false;

		csclApproverMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CsclApproverMapping> toCacheModel() {
		CsclApproverMappingCacheModel csclApproverMappingCacheModel =
			new CsclApproverMappingCacheModel();

		csclApproverMappingCacheModel.id_ = getId_();

		csclApproverMappingCacheModel.appointee = getAppointee();

		csclApproverMappingCacheModel.approver = getApprover();

		String approver = csclApproverMappingCacheModel.approver;

		if ((approver != null) && (approver.length() == 0)) {
			csclApproverMappingCacheModel.approver = null;
		}

		csclApproverMappingCacheModel.assignedTo = getAssignedTo();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			csclApproverMappingCacheModel.createdDate = createdDate.getTime();
		}
		else {
			csclApproverMappingCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			csclApproverMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			csclApproverMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return csclApproverMappingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsclApproverMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsclApproverMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclApproverMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CsclApproverMapping)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CsclApproverMapping, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CsclApproverMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclApproverMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CsclApproverMapping)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsclApproverMapping>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id_;
	private int _appointee;
	private int _originalAppointee;
	private boolean _setOriginalAppointee;
	private String _approver;
	private long _assignedTo;
	private long _originalAssignedTo;
	private boolean _setOriginalAssignedTo;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private CsclApproverMapping _escapedModel;

}