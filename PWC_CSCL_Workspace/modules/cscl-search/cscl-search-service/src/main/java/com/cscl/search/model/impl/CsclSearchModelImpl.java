/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cscl.search.model.impl;

import com.cscl.search.model.CsclSearch;
import com.cscl.search.model.CsclSearchModel;
import com.cscl.search.model.CsclSearchSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the CsclSearch service. Represents a row in the &quot;cscl_search&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CsclSearchModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsclSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CsclSearchImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CsclSearchModelImpl
	extends BaseModelImpl<CsclSearch> implements CsclSearchModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cscl search model instance should use the <code>CsclSearch</code> interface instead.
	 */
	public static final String TABLE_NAME = "cscl_search";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"keywords", Types.VARCHAR},
		{"link", Types.VARCHAR}, {"status", Types.INTEGER},
		{"createdById", Types.BIGINT}, {"updatedById", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("link", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createdById", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("updatedById", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cscl_search (id_ LONG not null primary key,name VARCHAR(75) null,description VARCHAR(500) null,keywords VARCHAR(200) null,link VARCHAR(200) null,status INTEGER,createdById LONG,updatedById LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table cscl_search";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csclSearch.name ASC, csclSearch.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cscl_search.name ASC, cscl_search.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long KEYWORDS_COLUMN_BITMASK = 1L;

	public static final long STATUS_COLUMN_BITMASK = 2L;

	public static final long NAME_COLUMN_BITMASK = 4L;

	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CsclSearch toModel(CsclSearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CsclSearch model = new CsclSearchImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setKeywords(soapModel.getKeywords());
		model.setLink(soapModel.getLink());
		model.setStatus(soapModel.getStatus());
		model.setCreatedById(soapModel.getCreatedById());
		model.setUpdatedById(soapModel.getUpdatedById());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CsclSearch> toModels(CsclSearchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CsclSearch> models = new ArrayList<CsclSearch>(soapModels.length);

		for (CsclSearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CsclSearchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CsclSearch.class;
	}

	@Override
	public String getModelClassName() {
		return CsclSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsclSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsclSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclSearch, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CsclSearch)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsclSearch, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsclSearch, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsclSearch)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsclSearch, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsclSearch, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CsclSearch>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CsclSearch.class.getClassLoader(), CsclSearch.class,
			ModelWrapper.class);

		try {
			Constructor<CsclSearch> constructor =
				(Constructor<CsclSearch>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CsclSearch, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsclSearch, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsclSearch, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CsclSearch, Object>>();
		Map<String, BiConsumer<CsclSearch, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CsclSearch, ?>>();

		attributeGetterFunctions.put("id", CsclSearch::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<CsclSearch, Long>)CsclSearch::setId);
		attributeGetterFunctions.put("name", CsclSearch::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<CsclSearch, String>)CsclSearch::setName);
		attributeGetterFunctions.put("description", CsclSearch::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CsclSearch, String>)CsclSearch::setDescription);
		attributeGetterFunctions.put("keywords", CsclSearch::getKeywords);
		attributeSetterBiConsumers.put(
			"keywords",
			(BiConsumer<CsclSearch, String>)CsclSearch::setKeywords);
		attributeGetterFunctions.put("link", CsclSearch::getLink);
		attributeSetterBiConsumers.put(
			"link", (BiConsumer<CsclSearch, String>)CsclSearch::setLink);
		attributeGetterFunctions.put("status", CsclSearch::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<CsclSearch, Integer>)CsclSearch::setStatus);
		attributeGetterFunctions.put("createdById", CsclSearch::getCreatedById);
		attributeSetterBiConsumers.put(
			"createdById",
			(BiConsumer<CsclSearch, Long>)CsclSearch::setCreatedById);
		attributeGetterFunctions.put("updatedById", CsclSearch::getUpdatedById);
		attributeSetterBiConsumers.put(
			"updatedById",
			(BiConsumer<CsclSearch, Long>)CsclSearch::setUpdatedById);
		attributeGetterFunctions.put("userName", CsclSearch::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CsclSearch, String>)CsclSearch::setUserName);
		attributeGetterFunctions.put("createDate", CsclSearch::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CsclSearch, Date>)CsclSearch::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CsclSearch::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CsclSearch, Date>)CsclSearch::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getKeywords() {
		if (_keywords == null) {
			return "";
		}
		else {
			return _keywords;
		}
	}

	@Override
	public void setKeywords(String keywords) {
		_columnBitmask |= KEYWORDS_COLUMN_BITMASK;

		if (_originalKeywords == null) {
			_originalKeywords = _keywords;
		}

		_keywords = keywords;
	}

	public String getOriginalKeywords() {
		return GetterUtil.getString(_originalKeywords);
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return "";
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getCreatedById() {
		return _createdById;
	}

	@Override
	public void setCreatedById(long createdById) {
		_createdById = createdById;
	}

	@JSON
	@Override
	public long getUpdatedById() {
		return _updatedById;
	}

	@Override
	public void setUpdatedById(long updatedById) {
		_updatedById = updatedById;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CsclSearch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CsclSearch toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsclSearch>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsclSearchImpl csclSearchImpl = new CsclSearchImpl();

		csclSearchImpl.setId(getId());
		csclSearchImpl.setName(getName());
		csclSearchImpl.setDescription(getDescription());
		csclSearchImpl.setKeywords(getKeywords());
		csclSearchImpl.setLink(getLink());
		csclSearchImpl.setStatus(getStatus());
		csclSearchImpl.setCreatedById(getCreatedById());
		csclSearchImpl.setUpdatedById(getUpdatedById());
		csclSearchImpl.setUserName(getUserName());
		csclSearchImpl.setCreateDate(getCreateDate());
		csclSearchImpl.setModifiedDate(getModifiedDate());

		csclSearchImpl.resetOriginalValues();

		return csclSearchImpl;
	}

	@Override
	public int compareTo(CsclSearch csclSearch) {
		int value = 0;

		value = getName().compareTo(csclSearch.getName());

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(), csclSearch.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CsclSearch)) {
			return false;
		}

		CsclSearch csclSearch = (CsclSearch)obj;

		long primaryKey = csclSearch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CsclSearchModelImpl csclSearchModelImpl = this;

		csclSearchModelImpl._originalKeywords = csclSearchModelImpl._keywords;

		csclSearchModelImpl._originalStatus = csclSearchModelImpl._status;

		csclSearchModelImpl._setOriginalStatus = false;

		csclSearchModelImpl._setModifiedDate = false;

		csclSearchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CsclSearch> toCacheModel() {
		CsclSearchCacheModel csclSearchCacheModel = new CsclSearchCacheModel();

		csclSearchCacheModel.id = getId();

		csclSearchCacheModel.name = getName();

		String name = csclSearchCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			csclSearchCacheModel.name = null;
		}

		csclSearchCacheModel.description = getDescription();

		String description = csclSearchCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			csclSearchCacheModel.description = null;
		}

		csclSearchCacheModel.keywords = getKeywords();

		String keywords = csclSearchCacheModel.keywords;

		if ((keywords != null) && (keywords.length() == 0)) {
			csclSearchCacheModel.keywords = null;
		}

		csclSearchCacheModel.link = getLink();

		String link = csclSearchCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			csclSearchCacheModel.link = null;
		}

		csclSearchCacheModel.status = getStatus();

		csclSearchCacheModel.createdById = getCreatedById();

		csclSearchCacheModel.updatedById = getUpdatedById();

		csclSearchCacheModel.userName = getUserName();

		String userName = csclSearchCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			csclSearchCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			csclSearchCacheModel.createDate = createDate.getTime();
		}
		else {
			csclSearchCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			csclSearchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			csclSearchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return csclSearchCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsclSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsclSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CsclSearch)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CsclSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CsclSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsclSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CsclSearch)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsclSearch>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _id;
	private String _name;
	private String _description;
	private String _keywords;
	private String _originalKeywords;
	private String _link;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _createdById;
	private long _updatedById;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private CsclSearch _escapedModel;

}