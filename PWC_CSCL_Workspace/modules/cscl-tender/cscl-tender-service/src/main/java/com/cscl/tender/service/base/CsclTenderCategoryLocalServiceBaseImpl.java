/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cscl.tender.service.base;

import com.cscl.tender.model.CsclTenderCategory;
import com.cscl.tender.service.CsclTenderCategoryLocalService;
import com.cscl.tender.service.persistence.CsclTenderCategoryPersistence;

import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the cscl tender category local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.cscl.tender.service.impl.CsclTenderCategoryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.cscl.tender.service.impl.CsclTenderCategoryLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class CsclTenderCategoryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements CsclTenderCategoryLocalService, AopService,
			   IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>CsclTenderCategoryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.cscl.tender.service.CsclTenderCategoryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the cscl tender category to the database. Also notifies the appropriate model listeners.
	 *
	 * @param csclTenderCategory the cscl tender category
	 * @return the cscl tender category that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CsclTenderCategory addCsclTenderCategory(
		CsclTenderCategory csclTenderCategory) {

		csclTenderCategory.setNew(true);

		return csclTenderCategoryPersistence.update(csclTenderCategory);
	}

	/**
	 * Creates a new cscl tender category with the primary key. Does not add the cscl tender category to the database.
	 *
	 * @param tenderCatId the primary key for the new cscl tender category
	 * @return the new cscl tender category
	 */
	@Override
	@Transactional(enabled = false)
	public CsclTenderCategory createCsclTenderCategory(long tenderCatId) {
		return csclTenderCategoryPersistence.create(tenderCatId);
	}

	/**
	 * Deletes the cscl tender category with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tenderCatId the primary key of the cscl tender category
	 * @return the cscl tender category that was removed
	 * @throws PortalException if a cscl tender category with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CsclTenderCategory deleteCsclTenderCategory(long tenderCatId)
		throws PortalException {

		return csclTenderCategoryPersistence.remove(tenderCatId);
	}

	/**
	 * Deletes the cscl tender category from the database. Also notifies the appropriate model listeners.
	 *
	 * @param csclTenderCategory the cscl tender category
	 * @return the cscl tender category that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CsclTenderCategory deleteCsclTenderCategory(
		CsclTenderCategory csclTenderCategory) {

		return csclTenderCategoryPersistence.remove(csclTenderCategory);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			CsclTenderCategory.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return csclTenderCategoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.cscl.tender.model.impl.CsclTenderCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return csclTenderCategoryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.cscl.tender.model.impl.CsclTenderCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return csclTenderCategoryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return csclTenderCategoryPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return csclTenderCategoryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public CsclTenderCategory fetchCsclTenderCategory(long tenderCatId) {
		return csclTenderCategoryPersistence.fetchByPrimaryKey(tenderCatId);
	}

	/**
	 * Returns the cscl tender category with the primary key.
	 *
	 * @param tenderCatId the primary key of the cscl tender category
	 * @return the cscl tender category
	 * @throws PortalException if a cscl tender category with the primary key could not be found
	 */
	@Override
	public CsclTenderCategory getCsclTenderCategory(long tenderCatId)
		throws PortalException {

		return csclTenderCategoryPersistence.findByPrimaryKey(tenderCatId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			csclTenderCategoryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CsclTenderCategory.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tenderCatId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			csclTenderCategoryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CsclTenderCategory.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"tenderCatId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			csclTenderCategoryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CsclTenderCategory.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tenderCatId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return csclTenderCategoryLocalService.deleteCsclTenderCategory(
			(CsclTenderCategory)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return csclTenderCategoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cscl tender categories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.cscl.tender.model.impl.CsclTenderCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cscl tender categories
	 * @param end the upper bound of the range of cscl tender categories (not inclusive)
	 * @return the range of cscl tender categories
	 */
	@Override
	public List<CsclTenderCategory> getCsclTenderCategories(
		int start, int end) {

		return csclTenderCategoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cscl tender categories.
	 *
	 * @return the number of cscl tender categories
	 */
	@Override
	public int getCsclTenderCategoriesCount() {
		return csclTenderCategoryPersistence.countAll();
	}

	/**
	 * Updates the cscl tender category in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param csclTenderCategory the cscl tender category
	 * @return the cscl tender category that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CsclTenderCategory updateCsclTenderCategory(
		CsclTenderCategory csclTenderCategory) {

		return csclTenderCategoryPersistence.update(csclTenderCategory);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			CsclTenderCategoryLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		csclTenderCategoryLocalService =
			(CsclTenderCategoryLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CsclTenderCategoryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CsclTenderCategory.class;
	}

	protected String getModelClassName() {
		return CsclTenderCategory.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				csclTenderCategoryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	protected CsclTenderCategoryLocalService csclTenderCategoryLocalService;

	@Reference
	protected CsclTenderCategoryPersistence csclTenderCategoryPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}